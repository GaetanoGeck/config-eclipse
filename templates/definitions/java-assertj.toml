[config]
context = "postfix"

[[templates]]
name = "at, assertThat"
description = "assert that ..."
pattern = """
${:importStatic(org.assertj.core.api.Assertions.assertThat)}\
assertThat(${inner_expression})."""

[[templates]]
name = "xat"
context = "java-statements"
description = "assert that ..."
pattern = """
${:importStatic(org.assertj.core.api.Assertions.assertThat)}\
assertThat(${Actual})."""

[[templates]]
name = "isnu, isNull"
description = "assert null"
pattern = """
${:importStatic(org.assertj.core.api.Assertions.assertThat)}\
assertThat(${inner_expression}).isNull();"""

[[templates]]
name = "isnnu, isNotNull"
description = "assert not null"
pattern = """
${:importStatic(org.assertj.core.api.Assertions.assertThat)}\
assertThat(${inner_expression}).isNotNull();"""

[[templates]]
name = "ise, isEmpty"
description = "assert empty"
pattern = """
${:importStatic(org.assertj.core.api.Assertions.assertThat)}\
assertThat(${inner_expression}).isEmpty();"""

[[templates]]
name = "isne, isNotEmpty"
description = "assert not empty"
pattern = """
${:importStatic(org.assertj.core.api.Assertions.assertThat)}\
assertThat(${inner_expression}).isNotEmpty();"""

[[templates]]
name = "iseq, isEqual"
description = "assert equal"
pattern = """
${:importStatic(org.assertj.core.api.Assertions.assertThat)}\
assertThat(${inner_expression}).isEqualTo(${expValue});"""

[[templates]]
name = "isneq, isNotEqual"
description = "assert not equal"
pattern = """
${:importStatic(org.assertj.core.api.Assertions.assertThat)}\
assertThat(${inner_expression}).isNotEqualTo(${expValue});"""

[[templates]]
name = "hasSize"
description = "assert size"
pattern = """
${:importStatic(org.assertj.core.api.Assertions.assertThat)}\
assertThat(${inner_expression}).hasSize(${expSize})"""

[[templates]]
name = "contains"
description = "assert contains"
pattern = """
${:importStatic(org.assertj.core.api.Assertions.assertThat)}\
assertThat(${inner_expression}).contains(${expElements})"""

[[templates]]
name = "containsExactly"
description = "assert contains exactly"
pattern = """
${:importStatic(org.assertj.core.api.Assertions.assertThat)}\
assertThat(${inner_expression}).containsExactly(${expElements})"""

[[templates]]
name = "tc"
description = "throwing callable"
pattern = """
${:import(org.assertj.core.api.ThrowableAssert.ThrowingCallable)}\
ThrowingCallable when = () -> ${inner_expression};"""

[[templates]]
name = "xtc, ThrowingCallable"
context = "java-statements"
description = "throwing callable"
pattern = """
${:import(org.assertj.core.api.ThrowableAssert.ThrowingCallable)}\
ThrowingCallable when = () -> """

[[templates]]
name = "assertThrows"
description = "assert exception"
context = "java-statements"
pattern = """
${:importStatic(org.assertj.core.api.Assertions.assertThatThrownBy)}\
assertThatThrownBy(when).isInstanceOf(${expException}.class)"""
