<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates>
	<template autoinsert="true" context="postfix" deleted="false" description="assert that ..." enabled="true" name="at">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert that ..." enabled="true" name="assertThat">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).</template>
	<template autoinsert="true" context="java-statements" deleted="false" description="assert that ..." enabled="true" name="xat">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${Actual}).</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert null" enabled="true" name="isnu">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isNull();</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert null" enabled="true" name="isNull">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isNull();</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert not null" enabled="true" name="isnnu">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isNotNull();</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert not null" enabled="true" name="isNotNull">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isNotNull();</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert empty" enabled="true" name="ise">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isEmpty();</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert empty" enabled="true" name="isEmpty">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isEmpty();</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert not empty" enabled="true" name="isne">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isNotEmpty();</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert not empty" enabled="true" name="isNotEmpty">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isNotEmpty();</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert equal" enabled="true" name="iseq">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isEqualTo(${expValue});</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert equal" enabled="true" name="isEqual">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isEqualTo(${expValue});</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert not equal" enabled="true" name="isneq">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isNotEqualTo(${expValue});</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert not equal" enabled="true" name="isNotEqual">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isNotEqualTo(${expValue});</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert size" enabled="true" name="hasSize">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).hasSize(${expSize})</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert contains" enabled="true" name="contains">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).contains(${expElements})</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert contains exactly" enabled="true" name="containsExactly">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).containsExactly(${expElements})</template>
	<template autoinsert="true" context="postfix" deleted="false" description="throwing callable" enabled="true" name="tc">${:import(org.assertj.core.api.ThrowableAssert.ThrowingCallable)}ThrowingCallable when = () -&gt; ${inner_expression};</template>
	<template autoinsert="true" context="java-statements" deleted="false" description="throwing callable" enabled="true" name="xtc">${:import(org.assertj.core.api.ThrowableAssert.ThrowingCallable)}ThrowingCallable when = () -&gt; </template>
	<template autoinsert="true" context="java-statements" deleted="false" description="throwing callable" enabled="true" name="ThrowingCallable">${:import(org.assertj.core.api.ThrowableAssert.ThrowingCallable)}ThrowingCallable when = () -&gt; </template>
	<template autoinsert="true" context="java-statements" deleted="false" description="assert exception" enabled="true" name="assertThrows">${:importStatic(org.assertj.core.api.Assertions.assertThatThrownBy)}assertThatThrownBy(when).isInstanceOf(${expException}.class)</template>
</templates>
