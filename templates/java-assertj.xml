<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates>
	<template autoinsert="true" context="postfix" deleted="false" description="assert that ..." enabled="true" name="at">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).${cursor}</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert empty" enabled="true" name="ate">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isEmpty();${cursor}</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert empty" enabled="true" name="empty">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isEmpty();${cursor}</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert not empty" enabled="true" name="atne">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isNotEmpty();${cursor}</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert not empty" enabled="true" name="notEmpty">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).isNotEmpty();${cursor}</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert size" enabled="true" name="ats">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).hasSize(${expSize})${cursor}</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert size" enabled="true" name="size">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).hasSize(${expSize})${cursor}</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert contains" enabled="true" name="atc">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).contains(${expElements})${cursor}</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert contains" enabled="true" name="contains">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).contains(${expElements})${cursor}</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert contains exactly" enabled="true" name="atce">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).containsExactly(${expElements})${cursor}</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert contains exactly" enabled="true" name="containsExactly">${:importStatic(org.assertj.core.api.Assertions.assertThat)}assertThat(${inner_expression}).containsExactly(${expElements})${cursor}</template>
	<template autoinsert="true" context="postfix" deleted="false" description="throwing callable" enabled="true" name="tc">${:import(org.assertj.core.api.ThrowableAssert.ThrowingCallable)}ThrowingCallable when = () -> ${inner_expression};</template>
	<template autoinsert="true" context="postfix" deleted="false" description="throwing callable" enabled="true" name="ThrowingCallable">${:import(org.assertj.core.api.ThrowableAssert.ThrowingCallable)}ThrowingCallable when = () -> ${inner_expression};</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert exception" enabled="true" name="ae">${:importStatic(org.assertj.core.api.Assertions.assertThatThrownBy)}assertThatThrownBy(${inner_expression})${cursor}</template>
	<template autoinsert="true" context="postfix" deleted="false" description="assert exception" enabled="true" name="thrownBy">${:importStatic(org.assertj.core.api.Assertions.assertThatThrownBy)}assertThatThrownBy(${inner_expression})${cursor}</template>
</templates>
